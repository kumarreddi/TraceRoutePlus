//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TraceRoutePlus.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TraceRoutePlus.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TraceRoutePlus
        ///--------------
        ///Author: Starbeeamrainbowlabs &lt;https://starbeamrainbowlabs.com&gt;
        ///Twitter: https://twitter.com/SBRLabs
        ///Github Repository: https://github.com/sbrl/TraceRoutePlus
        ///Contributors: (none yet! Be the first!)
        ///License: Mozilla Public License 2.0
        /// -&gt; Type `tracerouteplus /license` to see the full license
        ///.
        /// </summary>
        internal static string About {
            get {
                return ResourceManager.GetString("About", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TraceRoutePlus
        ///--------------
        ///By Starbeamrainbowlabs &lt;https://starbeamrainbowlabs.com&gt;
        ///Type `tracerouteplus /about` for full information
        ///
        ///Usage: tracerouteplus &lt;options&gt; domain1.com domain2.co.uk domainx.abc...
        ///
        ///Option Name | Default Value | Information
        ///------------|---------------|---------------------------------------------------
        ///timeout     | 8             | The maximum amount of time we should wait for a
        ///                              response from any given ping request.
        ///retries     | 5      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Help {
            get {
                return ResourceManager.GetString("Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mozilla Public License, version 2.0
        ///
        ///1. Definitions
        ///
        ///1.1. &quot;Contributor&quot;
        ///
        ///     means each individual or legal entity that creates, contributes to the
        ///     creation of, or owns Covered Software.
        ///
        ///1.2. &quot;Contributor Version&quot;
        ///
        ///     means the combination of the Contributions of others (if any) used by a
        ///     Contributor and that particular Contributor&apos;s Contribution.
        ///
        ///1.3. &quot;Contribution&quot;
        ///
        ///     means Covered Software of a particular Contributor.
        ///
        ///1.4. &quot;Covered Software&quot;
        ///
        ///     means Source Code  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LICENSE {
            get {
                return ResourceManager.GetString("LICENSE", resourceCulture);
            }
        }
    }
}
